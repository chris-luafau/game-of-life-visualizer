{"version":3,"sources":["Cell.js","game-of-life-visualizer.js","index.js"],"names":["killAnimation","keyframes","StyledCell","styled","div","props","isFilled","wasKilled","Cell","cell","row","col","onMouseDown","onMouseEnter","onMouseUp","GameOfLifeVisualizer","handleHowItWorksClick","show","state","showModal","setState","createGrid","type","grid","currentRow","push","createCell","handleClick","currGrid","mouseIsPressed","this","step","length","pop","clearInterval","interval","setInterval","newGrid","neighbors","toggleCell","VisualizerWrapper","onClick","GlobalStyle","HeaderWrapper","AppNameWrapper","ButtonsWrapper","Button","handleTypeClick","AppInfo","GridWrapper","VisualizerBtns","handleStepClick","title","handleBackBtnClick","handleAutoRunClick","handleStopClick","handleResetClick","Grid","map","rowIdx","key","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","Div","React","Component","Modal","mod","StyledModal","Rules","H3","h3","createGlobalStyle","button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcbb43df.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport styled, {keyframes}from 'styled-components'\r\n\r\nconst Cell = (props) => {\r\n  const {row, col, isFilled, wasKilled, onMouseDown, onMouseEnter, onMouseUp} = props;\r\n\r\n  let cell;\r\n  if (isFilled) {\r\n    cell = <StyledCell\r\n      isFilled\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()} />\r\n  }\r\n  else if (wasKilled) {\r\n    cell  = <StyledCell\r\n      wasKilled\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()} />\r\n  }\r\n  else {\r\n    cell = <StyledCell\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()} />\r\n  }\r\n  return (<>{cell}</>)\r\n}\r\n\r\nconst killAnimation = keyframes `\r\n  from {\r\n    transform: scale(0.3);\r\n    background-color: rgba(0, 0, 66, 0.75);\r\n    border-radius: 100%;\r\n  }\r\n  to {\r\n    transform: scale(1);\r\n    background-color: rgba(0, 190, 218, 0.75);\r\n  }\r\n`\r\n\r\nconst StyledCell = styled.div `\r\n  width: 20px;\r\n  height: 20px;\r\n  outline: 1px solid palevioletred;\r\n  display: inline-block;\r\n  background-color: ${props => props.isFilled ? \"black\" : \"white\"};\r\n  animation: ${props => props.wasKilled ? killAnimation : \"\"} 1s linear forwards;\r\n  `\r\n\r\n\r\n\r\nexport default Cell;\r\n","\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport Cell from './Cell.js'\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nexport default class GameOfLifeVisualizer extends React.Component {\r\n  // Initialize state to hold grid history, whether it should show the modal or not, and whether or not the mouse is pressed.\r\n  constructor(props) {\r\n    super(props);\r\n    const grid = this.createGrid('');\r\n    const currGrid = [];\r\n    currGrid.push(grid);\r\n    this.state = {\r\n      grid: currGrid,\r\n      showModal: false,\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  // Handles user click on example shape types.\r\n  handleTypeClick(type) {\r\n    const grid = this.createGrid(type);\r\n    const currGrid = this.state.grid;\r\n    currGrid.push(grid);\r\n    this.setState({grid: currGrid});\r\n  }\r\n\r\n  // Handles user click on the Step button.\r\n  handleStepClick() {\r\n    const grid = this.step();\r\n    const currGrid = this.state.grid;\r\n    currGrid.push(grid);\r\n    this.setState({grid: currGrid});\r\n  }\r\n\r\n  // Handles user click on the Back button.\r\n  handleBackBtnClick() {\r\n    if (this.state.grid.length > 2) {\r\n      let grid = this.state.grid;\r\n      grid.pop();\r\n      this.setState({grid});\r\n    }\r\n  }\r\n\r\n  // Handles user click on the Auto-run button.\r\n  handleAutoRunClick() {\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(() => {\r\n      const currGrid = this.state.grid;\r\n      const newGrid = this.step();\r\n      currGrid.push(newGrid);\r\n      this.setState({grid: currGrid});\r\n    }, 100)\r\n  }\r\n\r\n  // Handles user click on the Stop button.\r\n  handleStopClick() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  // Resets the grid.\r\n  handleResetClick() {\r\n    // Stop interval\r\n    clearInterval(this.interval);\r\n\r\n    const grid = this.createGrid('');\r\n    const currGrid =  [];\r\n    currGrid.push(grid);\r\n    this.setState({grid: currGrid});\r\n  }\r\n\r\n  // Shows the rules modal.\r\n  handleHowItWorksClick = () => {\r\n    let show = !this.state.showModal;\r\n    this.setState({showModal: show});\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.createGrid('');\r\n    const currGrid = this.state.grid;\r\n    currGrid.push(grid);\r\n    this.setState({grid: currGrid});\r\n  }\r\n\r\n  // Function to move the game forward 1 generation.\r\n  step() {\r\n    const newGrid = this.createGrid('');\r\n    let currGrid = this.state.grid[this.state.grid.length-1];\r\n\r\n    for (let row = 0; row < 40; ++row) {\r\n      for (let col = 0; col < 40; ++col) {\r\n        let neighbors = 0;\r\n\r\n        /*\r\n          Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n          Any live cell with two or three live neighbours lives on to the next generation.\r\n          Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n          Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n        */\r\n\r\n        /*\r\n        Edge cases:\r\n        - On left-most or right-most column\r\n        - On top-most or bottom-most row\r\n        - Corners\r\n        */\r\n        // General cases\r\n        if (row > 0 && row < 39 && col > 0 && col < 39) {\r\n          // top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top-right\r\n          if (currGrid[row-1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom-right\r\n          if (currGrid[row+1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom-left\r\n          if (currGrid[row+1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top-left\r\n          if (currGrid[row-1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Corners\r\n        // Top-left\r\n        else if (row === 0 && col === 0) {\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom-right\r\n          if (currGrid[row+1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Top-right\r\n        else if (row === 0 && col === 39) {\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom-left\r\n          if (currGrid[row+1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Bottom-right\r\n        else if (row === 39 && col === 39) {\r\n          // Top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // Top-left\r\n          if (currGrid[row-1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // bottom-left\r\n        else if (row === 39 && col === 0) {\r\n          // top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top-right\r\n          if (currGrid[row-1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Top Row\r\n        else if (row === 0) {\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // Bottom-right\r\n          if (currGrid[row+1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom-left\r\n          if (currGrid[row+1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Bottom row\r\n        else if (row === 39) {\r\n          // top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top-right\r\n          if (currGrid[row-1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top-left\r\n          if (currGrid[row-1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // Left column\r\n        else if (col === 0) {\r\n          // top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top right\r\n          if (currGrid[row-1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // right\r\n          if (currGrid[row][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom right\r\n          if (currGrid[row+1][col+1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n        // right column\r\n        else if (col === 39) {\r\n          // top\r\n          if (currGrid[row-1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom\r\n          if (currGrid[row+1][col].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // bottom left\r\n          if (currGrid[row+1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // left\r\n          if (currGrid[row][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n          // top left\r\n          if (currGrid[row-1][col-1].isFilled) {\r\n            neighbors += 1\r\n          }\r\n        }\r\n\r\n        /////////\r\n\r\n        if (!currGrid[row][col].isFilled) {\r\n          if (neighbors === 3) {\r\n            newGrid[row][col].isFilled = true;\r\n            newGrid[row][col].wasKilled = currGrid[row][col].wasKilled;\r\n          } else {\r\n            newGrid[row][col].isFilled = false;\r\n            newGrid[row][col].wasKilled = currGrid[row][col].wasKilled;\r\n          }\r\n        } else {\r\n          if (neighbors === 2 || neighbors === 3) {\r\n            newGrid[row][col].isFilled = true;\r\n            newGrid[row][col].wasKilled = currGrid[row][col].wasKilled;\r\n          } else {\r\n            newGrid[row][col].wasKilled = true;\r\n            newGrid[row][col].isFilled = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  }\r\n\r\n\r\n  // Creates and returns a grid according to the type provided.\r\n  createGrid = (type) => {\r\n    const grid = [];\r\n\r\n    if (type === '') {\r\n      for (let row = 0; row < 40; ++row) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 40; ++col) {\r\n          currentRow.push(createCell(row, col, false));\r\n        }\r\n        grid.push(currentRow);\r\n      }\r\n    }\r\n    else if (type === 'Pulsar') {\r\n      for (let row = 0; row < 40; ++row) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 40; ++col) {\r\n          if ((col === 0 + 4 || col === 5 + 4 || col === 7 + 4 || col === 12 + 4) &&\r\n            (((row >= 2 + 11 && row <= 4 + 11) || (row >= 8 + 11 && row <= 10 + 11)))) {\r\n              currentRow.push(createCell(row, col, true));\r\n          }\r\n          else if (((col >= 2 + 4 && col <= 4 + 4) || (col >= 8 + 4 && col <= 10 + 4)) &&\r\n            (row === 0 + 11 || row === 5 + 11 || row === 7 + 11 || row === 12 + 11)) {\r\n            currentRow.push(createCell(row, col, true));\r\n          }\r\n          else {\r\n            currentRow.push(createCell(row, col, false));\r\n          }\r\n        }\r\n        grid.push(currentRow);\r\n      }\r\n    }\r\n    else if (type === 'Glider') {\r\n      for (let row = 0; row < 40; ++row) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 40; ++col) {\r\n          if (col === 2 && (row >= 0 && row <= 2)) {\r\n            currentRow.push(createCell(row, col, true));\r\n          }\r\n          else if (row === 1 && col === 0) {\r\n            currentRow.push(createCell(row, col, true));\r\n          }\r\n          else if (row === 2 && col === 1) {\r\n            currentRow.push(createCell(row, col, true));\r\n          }\r\n          else {\r\n            currentRow.push(createCell(row, col, false));\r\n          }\r\n        }\r\n        grid.push(currentRow);\r\n      }\r\n    }\r\n    else if (type === 'GosperGlider') {\r\n      for (let row = 0; row < 40; ++row) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 40; ++col) {\r\n          if ((col === 9 || col === 10) && (row === 1 || row === 2)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if ((col === 7 || col === 8) && (row === 35 || row === 36)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if ((row === 11 || row === 17) && (col >= 9 && col <= 11)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (col === 7 && row >= 13 && row <= 14) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (col === 13 && row >= 13 && row <= 14) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (col === 8 && (row === 12 || row === 16)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (col === 12 && (row === 12 || row === 16)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (col === 10 && (row === 15 || row === 18)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if ((col >= 7 && col <= 9) && (row >= 21 && row <= 22)) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if ((col === 6 || col === 10) && row === 23) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else if (((col >= 5 && col <= 6) || (col >= 10 && col <= 11)) && row === 25) {\r\n            currentRow.push(createCell(row, col, true))\r\n          } else {\r\n            currentRow.push(createCell(row, col, false))\r\n          }\r\n        }\r\n        grid.push(currentRow)\r\n      }\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  // Toggles a cell on or off on user click.\r\n  toggleCell(row, col) {\r\n    let currGrid = this.state.grid;\r\n    currGrid[currGrid.length - 1][row][col].isFilled = !currGrid[currGrid.length - 1][row][col].isFilled;\r\n    return currGrid;\r\n  }\r\n\r\n  // Toggles the rules modal on or off.\r\n  handleClick = () => {\r\n    if (this.state.showModal) {\r\n      this.setState({showModal: false})\r\n    }\r\n  }\r\n\r\n  // Handles user click on a grid cell.\r\n  handleMouseDown(row, col) {\r\n    const newGrid = this.toggleCell(row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  // Handles when cursor hovers over a cell.\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = this.toggleCell(row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  // Handles mouse up.\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <VisualizerWrapper showModal={this.state.showModal} onClick={() => {this.handleClick()}}>\r\n        <GlobalStyle />\r\n        <HeaderWrapper>\r\n          <AppNameWrapper>\r\n            <h1>Game Of Life Visualizer</h1>\r\n          </AppNameWrapper>\r\n          <ButtonsWrapper>\r\n            <Button onClick={() => {this.handleHowItWorksClick()}}>How it works</Button>\r\n            <Button onClick={() => {this.handleTypeClick('Glider')}}>Glider</Button>\r\n            <Button onClick={() => {this.handleTypeClick('Pulsar')}}>Pulsar</Button>\r\n            <Button onClick={() => {this.handleTypeClick('GosperGlider')}}>Gosper Glider</Button>\r\n          </ButtonsWrapper>\r\n        </HeaderWrapper>\r\n        <br /><br />\r\n        <AppInfo>\r\n          Click and drag to draw your own shapes and/or choose a starting shape above!!\r\n        </AppInfo>\r\n        <br /><br />\r\n        <GridWrapper>\r\n          <VisualizerBtns>\r\n            <button onClick={() => this.handleStepClick()} title=\"Move forward 1 generation\" >\r\n              Step\r\n            </button>\r\n            <button onClick={() => this.handleBackBtnClick()} title=\"Move back 1 generation\">\r\n              Back\r\n            </button>\r\n            <button onClick={() => this.handleAutoRunClick()} title=\"Automatically step through game\">\r\n              Auto-run\r\n            </button>\r\n            <button onClick={() => this.handleStopClick()} title=\"Stop game\">\r\n              Stop\r\n            </button>\r\n            <button onClick={() => this.handleResetClick()} title=\"Reset grid\">\r\n              Reset\r\n            </button>\r\n          </VisualizerBtns>\r\n          <br /><br />\r\n          <Grid>\r\n            {this.state.grid[this.state.grid.length-1].map((row, rowIdx) => {\r\n              return (\r\n                <div key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFilled, wasKilled} = node;\r\n                    return (\r\n                      <Cell\r\n                        row={row}\r\n                        col={col}\r\n                        isFilled={isFilled}\r\n                        wasKilled={wasKilled}\r\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        key={nodeIdx} />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </GridWrapper>\r\n        <Div showModal={this.state.showModal}></Div>\r\n        <Modal showModal={this.state.showModal} />\r\n\r\n      </VisualizerWrapper>\r\n    )\r\n  }\r\n}\r\n\r\n// Function to return a cell object that contains the row, col, and isFilled properties.\r\nconst createCell = (row, col, isFilled) => ({row, col, isFilled,})\r\n\r\n// Functional component for the Rules Modal. Handles whether or not to show it depending on the props provided.\r\nconst Modal = (props) => {\r\n  let {showModal} = props\r\n  let mod;\r\n  if (showModal) {\r\n    mod = <StyledModal showModal><Rules /></StyledModal>\r\n  } else {\r\n    mod = <StyledModal />\r\n  }\r\n  return (\r\n    <>{mod}</>\r\n  )\r\n}\r\n\r\n// Functional Component to return the rules to be generated inside of the modal.\r\nconst Rules = () => {\r\n  return (\r\n    <div>\r\n      <H3>Rules</H3>\r\n      <ul>\r\n        <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\r\n        <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\r\n        <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\r\n        <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n// STYLED COMPONENTS //\r\nconst H3 = styled.h3 `\r\n  text-align: center;\r\n`\r\n\r\nconst AppInfo = styled.div `\r\n  font-family: sans-serif;\r\n  text-align: center;\r\n  font-size: 1rem;\r\n`\r\n\r\nconst Div = styled.div `\r\n  position: fixed;\r\n  display: ${props => props.showModal ? \"block\" : \"none\"};\r\n  background: ${props => props.showModal ? \"rgba(0,0,0,0.6)\" : \"none\"};\r\n  margin: 0;\r\n  padding: 0;\r\n  min-width: 100%;\r\n  min-height: 150vh;\r\n`\r\n\r\nconst StyledModal = styled.div `\r\n  position: fixed;\r\n  background-color: white;\r\n  width: 510px;\r\n  height: auto;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -75%);\r\n  display: ${props => props.showModal ? \"inline-block\" : \"none\"};\r\n`\r\n\r\nconst VisualizerWrapper = styled.div `\r\n  display: flex;\r\n  width: 100%;\r\n  height: auto;\r\n  margin: 0;\r\n  padding: 0;\r\n  margin-top: -8px;\r\n  align-self: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n  html {\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nconst HeaderWrapper = styled.div `\r\n  display: flex;\r\n  width: inherit;\r\n  height: auto;\r\n  align-self: center;\r\n  background-color: palevioletred;\r\n  justify-content: center;\r\n  font-size: 0.8rem;\r\n\r\n`\r\n\r\nconst AppNameWrapper = styled.div `\r\n  display: flex;\r\n  justify-content: flex-start;\r\n`\r\n\r\nconst ButtonsWrapper = styled.div `\r\n  display: flex;\r\n  width: 40vw;\r\n  margin-left: 10vw;\r\n  justify-content: space-around;\r\n`\r\n\r\nconst VisualizerBtns = styled.div `\r\n  align-self: center;\r\n  width: 20vw;\r\n  height: auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst Grid = styled.div `\r\n  width: 800px;\r\n  height: 800px;\r\n  font-size: 0;\r\n  transform: scaleX(-1) rotate(90deg);\r\n  align-self: center;\r\n`\r\n\r\nconst GridWrapper = styled.div `\r\n  display: flex;\r\n  width: 100vw;\r\n  height: auto;\r\n  margin: 0;\r\n  padding: 0;\r\n  flex-direction: column;\r\n  align-self: center;\r\n  justify-content: flex-start;\r\n`\r\n\r\nconst Button = styled.button `\r\n  font-family: sans-serif;\r\n  font-size: 1rem;\r\n  width: 10vw;\r\n  height: 4vh;\r\n  align-self: center;\r\n  background: transparent;\r\n  border: none;\r\n  :active {\r\n    color: red;\r\n    outline-color: none;\r\n  }\r\n  :focus {\r\n    outline: 0;\r\n  }\r\n`\r\n","\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport GameOfLifeVisualizer from './game-of-life-visualizer'\r\n\r\nReactDOM.render(<GameOfLifeVisualizer />, document.getElementById('root'));\r\n"],"sourceRoot":""}